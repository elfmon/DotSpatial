using GeoAPI.Geometries;
using GisSharpBlog.NetTopologySuite.Geometries;
using GisSharpBlog.NetTopologySuite.IO;
using NUnit.Framework;

namespace GisSharpBlog.NetTopologySuite.Tests.Various
{
    [TestFixture]
    public class Issue36Tests
    {
        private readonly IGeometryFactory factory = GeometryFactory.Default;

        private WKTReader reader;        

        [TestFixtureSetUp]
        public void FixtureSetup()
        {
            reader = new WKTReader(factory);
        }

        [Test]
        public void Buffer()
        {
            var geometry = reader.Read(
                @"POLYGON((719068.76798974432 6178827.370335687 31.0995,719070.73569863627 6178830.5852228012 31.0995,719076.87100000086 6178826.8299 31.0995,719078.2722488807 6178825.9722172953 31.0995,719076.30480000074 6178822.7577000009 31.0995,719068.76798974432 6178827.370335687 31.0995))");
            Assert.IsNotNull(geometry);
            Assert.IsTrue(geometry.IsValid);

            var buffered = geometry.Buffer(0.01);
            Assert.IsNotNull(buffered);
            Assert.IsTrue(buffered.IsValid);
            Assert.IsFalse(buffered.EqualsExact(geometry));
        }

        [Test]
        public void TestIsValid()
        {
            var geom1 = reader.Read(
                    @"POLYGON((719068.76798974432 6178827.370335687 31.0995,719070.73569863627 6178830.5852228012 31.0995,719076.87100000086 6178826.8299 31.0995,719078.2722488807 6178825.9722172953 31.0995,719076.30480000074 6178822.7577000009 31.0995,719068.76798974432 6178827.370335687 31.0995))");
            Assert.IsNotNull(geom1);
            Assert.IsTrue(geom1.IsValid);

            var geom2 = reader.Read(
                    @"POINT(719080.36969999934 6178824.6883999994)");
            Assert.IsNotNull(geom2);
            Assert.IsTrue(geom2.IsValid);

            var expected = reader.Read(
                    @"POLYGON ((719068.7579976716 6178827.369937588, 719068.758112008 6178827.371894637, 719068.7586059568 6178827.373791773, 719068.759460535 6178827.375556088, 719070.727169427 6178830.590443202, 719070.7283517772 6178830.592006875, 719070.7298164692 6178830.593309835, 719070.7315072144 6178830.594302007, 719070.733359037 6178830.594945263, 719070.7353007706 6178830.595214883, 719070.7372577946 6178830.595100504, 719070.7391548998 6178830.594606523, 719070.74091918 6178830.593751923, 719070.7409191797 6178830.593751923, 719076.8762205446 6178826.838429122, 719078.2774694242 6178825.980746417, 719078.2774694244 6178825.980746417, 719078.2790330398 6178825.979564076, 719078.2803359522 6178825.97809941, 719078.2813280922 6178825.976408705, 719078.2819713342 6178825.974556932, 719078.2822409592 6178825.97261525, 719078.2821266062 6178825.970658276, 719078.2816326694 6178825.968761212, 719078.2807781298 6178825.966996959, 719076.31332925 6178822.752479665, 719076.3121469484 6178822.750916023, 719076.3106823174 6178822.749613076, 719076.30899164 6178822.748620895, 719076.3071398856 6178822.747977607, 719076.3051982138 6178822.747707932, 719076.3032412394 6178822.747822234, 719076.3013441653 6178822.748316121, 719076.2995798928 6178822.749170613, 719068.7627696363 6178827.361806299, 719068.7627696362 6178827.361806299, 719068.7612059064 6178827.36298861, 719068.759902887 6178827.364453278, 719068.7589106546 6178827.366144013, 719068.7582673416 6178827.36799584, 719068.7579976716 6178827.369937588))");
            Assert.IsNotNull(expected);
            Assert.IsTrue(expected.IsValid);

            var actual = geom1.Buffer(0.01);
            Assert.IsNotNull(actual);
            Assert.IsTrue(actual.IsValid);

            Assert.IsTrue(expected.EqualsExact(actual));
        }
    }
}
